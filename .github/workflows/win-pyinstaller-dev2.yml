name: Windows PyInstaller

on:
  push:
    branches:
      - main
      - dev-2.0
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.12"]  # Paraleliza builds para cada versão do Python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Get latest Git tag
        id: get_version
        run: |
          for /f "tokens=*" %%i in ('git describe --tags --abbrev=0 2^>nul') do set VERSION=%%i
          if not defined VERSION set VERSION=v0.1.0
          echo VERSION=%VERSION% >> $env:GITHUB_ENV
          echo Resolved version: %VERSION%
        shell: cmd
        
      - name: Setup FFmpeg
        uses: federicocarboni/setup-ffmpeg@v3.1
        with:
          ffmpeg-version: release
          architecture: x64 

      - name: Verify FFmpeg installation
        run: |
          where ffmpeg
          ffmpeg -version 

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create and activate virtual environment for Python ${{ matrix.python-version }}
        run: |
          python -m venv .venv-${{ matrix.python-version }}
          .\.venv-${{ matrix.python-version }}\Scripts\Activate
        shell: pwsh

      - name: Install dependencies for Python ${{ matrix.python-version }}
        run: |
          .\.venv-${{ matrix.python-version }}\Scripts\Activate
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller
        shell: pwsh

      - name: Verify whisper assets directory for Python ${{ matrix.python-version }}
        run: |
          .\.venv-${{ matrix.python-version }}\Scripts\Activate
          $whisperPath = (python -c "import whisper; print(whisper.__file__)").Trim()
          $assetsPath = Join-Path (Split-Path $whisperPath) 'assets'
          if (Test-Path $assetsPath) {
            Write-Host "O diretório 'assets' existe em: $assetsPath"
            echo "ASSETS_PATH=$assetsPath" >> $env:GITHUB_ENV
          } else {
            Write-Host "O diretório 'assets' NÃO existe."
            exit 1
          }
        shell: pwsh

      - name: Compile with PyInstaller for Python ${{ matrix.python-version }}
        run: |
          .\.venv-${{ matrix.python-version }}\Scripts\Activate
          $ffmpegPath = (Get-Command ffmpeg).Source
          pyinstaller main.py `
            --onefile `
            --path="$(Get-Location)" `
            --add-binary="$ffmpegPath;." `
            --add-binary="pytranscriber.sqlite;." `
            --add-data="pytranscriber/gui/*.qm;pytranscriber/gui/" `
            --add-data="${env:ASSETS_PATH};whisper/assets" `
            --clean

        shell: pwsh
        
      - name: Rename and zip the .app bundle with version number
        run: |
          cd dist
          move /Y main.exe "pyTranscriber-${VERSION}.exe"
          tar -a -cf "pyTranscriber-${VERSION}.zip" "pyTranscriber-${VERSION}.exe"
        shell: cmd 
        
      - name: Upload built executable for Python ${{ matrix.python-version }}
        uses: actions/upload-artifact@v4
        with:
          name: pyTranscriber-${VERSION}-py${{ matrix.python-version }}
          path: ./dist/pyTranscriber-${VERSION}.zip # Ajuste se necessário

  download:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download built executables
        uses: actions/download-artifact@v4
        with:
          path: ./output

      - name: List downloaded files
        run: dir ./output
